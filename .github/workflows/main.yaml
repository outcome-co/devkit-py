name: Continuous Integration

on: push

env:
  POETRY_CACHE_DIR: ".cache/poetry"
  PIP_CACHE_DIR: ".cache/pip"

jobs:
    commit_lint:
      name: "Lint commit messages"
      runs-on: ubuntu-latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      steps:
        - name: "Check out code"
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
  
        - name: "Lint commit messages"
          uses: wagoid/commitlint-github-action@v1
          with:
            failOnWarnings: true

    tests:
      name: "Run linting"
      runs-on: ubuntu-latest

      steps:
        - name: "Check out code"
          uses: actions/checkout@v2

        - name: "Get python version"
          uses: outcome-co/action-read-toml@master
          id: python_version
          with:
            path: pyproject.toml
            key: tool.poetry.dependencies.python

        - name: "Set up python ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}"
          uses: actions/setup-python@v1
          with:
            python-version: ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}

        - name: Configure pip cache
          uses: actions/cache@v1
          with:
            path: ${{ env.PIP_CACHE_DIR }}
            key: pip-${{ hashFiles('**/pyproject.toml') }}

        - name: Configure poetry cache
          uses: actions/cache@v1
          with:
            path: ${{ env.POETRY_CACHE_DIR }}
            key: poetry-${{ hashFiles('**/pyproject.toml') }}

        - name: "Install dev dependencies"
          run: make dev-setup

        - name: "Run linters"
          run: make lint

    publish:
      name: "Publish package"
      runs-on: ubuntu-latest
      needs: [commit_lint, tests]

      # Only run this if we're in master
      if: github.ref == 'refs/heads/master'

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: "Get python version"
          uses: outcome-co/action-read-toml@master
          id: python_version
          with:
            path: pyproject.toml
            key: tool.poetry.dependencies.python

        - name: "Set up python ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}"
          uses: actions/setup-python@v1
          with:
            python-version: ${{ steps.python_version.outputs.tool_poetry_dependencies_python }}

        - name: Configure pip cache
          uses: actions/cache@v1
          with:
            path: ${{ env.PIP_CACHE_DIR }}
            key: pip-${{ hashFiles('**/pyproject.toml') }}

        - name: Configure poetry cache
          uses: actions/cache@v1
          with:
            path: ${{ env.POETRY_CACHE_DIR }}
            key: poetry-${{ hashFiles('**/pyproject.toml') }}

        - name: "Install dev dependencies"
          run: make dev-setup

        - name: "Publish package"
          run: make publish
          env:
            POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}

